function[Recorder_Updated, Flag_In_Converge] = NCCG_Sub_SP_v10(Season, Recorder_Text, Recorder_Old)
%% ----------------------------- Root Path ----------------------------- %%
Ini_Path = which('Location_CPO_v10.m');
Ini_Size = size('Location_CPO_v10.m', 2);
if ispc == 1
    Link = '\';
elseif ismac == 1
    Link = '/';
end
Path_Root = Ini_Path(1:end - Ini_Size - 1);
Path_Data = strcat(Path_Root, Link, 'Database');
Peak_Day_List = readmatrix(strcat(Path_Data, Link, 'Peak_Day_List', '.csv'));
Date_All_List = importdata(strcat(Path_Data, Link, 'Date_All_List', '.mat'));
City_Weight   = readmatrix(strcat(Path_Data, Link, 'City_Weight', '.csv'));
Day_Dispatch  = Peak_Day_List(Season);
Date_Dispatch = Date_All_List(Day_Dispatch);
%
%% ----------------------------- Database ------------------------------ %%
[Num_Gen,...
 Num_Branch,...
 Num_Bus,...
 Num_City,...
 Num_Hour,...
 Num_RES,...
 Gen_Capacity,...
 Gen_Price,...
 Branch,...
 Load_Gro_SUM_All_ACT,...
 Load_Gro_SUM_All_DAF,...
 Load_Gro_SUM_Dis_ACT,...
 Load_Gro_SUM_Dis_DAF, Load_Gro_SUM_Dis_DAF_UB, Load_Gro_SUM_Dis_DAF_LB,...
 Load_Net_SUM_All_ACT,...
 Load_Net_SUM_All_DAF,...
 Load_Net_SUM_Dis_ACT,...
 Load_Net_SUM_Dis_DAF,...
 Load_City_All_ACT,...
 Load_City_All_DAF,...
 Load_City_Dis_ACT,...
 Load_City_Dis_DAF,...
 RES_SUM_All_ACT,...
 RES_SUM_All_DAF, RES_SUM_All_DAF_UB, RES_SUM_All_DAF_LB,...
 RES_SUM_Dis_ACT,...
 RES_SUM_Dis_DAF, RES_SUM_Dis_DAF_UB, RES_SUM_Dis_DAF_LB,...
 RES_Farm_All_ACT,...
 RES_Farm_All_DAF, RES_Farm_All_DAF_UB, RES_Farm_All_DAF_LB,...
 RES_Farm_Dis_ACT,...
 RES_Farm_Dis_DAF, RES_Farm_Dis_DAF_UB, RES_Farm_Dis_DAF_LB,...
 R_Sys_Req_All,...
 R_Sys_Req_Dis,...
 R_H_Req_All,...
 R_H_Req_Dis,...
 R_C_Req_All,...
 R_C_Req_Dis,...
 PTDF_Gen,...
 PTDF_City,...
 PTDF_RES,...
 GS_Price,...
 LS_Price,...
 BS_Price,...
 Date_All_List,...
 Day, Pre_W_UB, Pre_W_LB,...
 Unit_Quick,...
 Unit_Thermal] = Database_CPO_v10(Date_Dispatch, Link, Path_Data);
%
%% --------------------------- Load Recorder --------------------------- %%
Recorder          = Recorder_Old;
Recorder(:, 1)    = [];

Var_UC_I          = Recorder{10, end};
Var_UC_I_SU       = Recorder{11, end};
Var_UC_I_SD       = Recorder{12, end};
Var_UC_I_RC       = Recorder{13, end};
Var_UC_P          = Recorder{14, end};
Var_UC_W          = Recorder{15, end};
Var_UC_R_H        = Recorder{16, end};
Var_UC_R_C        = Recorder{17, end};
Cost_1st_Stage    = Recorder{18, end};
In_W_UB_History   = Recorder{19, end};
In_W_LB_History   = Recorder{20, end};
In_L_UB_History   = Recorder{21, end};
In_L_LB_History   = Recorder{22, end};
%
%% -------------------------- Uncertainty Set -------------------------- %%
In_W_UB_Latest = round(In_W_UB_History{end});
In_W_LB_Latest = round(In_W_LB_History{end});
In_L_UB_Latest = round(In_L_UB_History{end});
In_L_LB_Latest = round(In_L_LB_History{end});
% RES
RES_Farm_Dis_ACT_Scens = RES_Farm_Dis_DAF...
                       + In_W_UB_Latest.*(RES_Farm_Dis_DAF_UB - RES_Farm_Dis_DAF)...
                       + In_W_LB_Latest.*(RES_Farm_Dis_DAF_LB - RES_Farm_Dis_DAF);
%
% Load
Load_SUM_Dis_ACT_Scens = Load_Gro_SUM_Dis_DAF...
                       + In_L_UB_Latest.*(Load_Gro_SUM_Dis_DAF_UB - Load_Gro_SUM_Dis_DAF)...
                       + In_L_LB_Latest.*(Load_Gro_SUM_Dis_DAF_LB - Load_Gro_SUM_Dis_DAF);
%
for c = 1:Num_City
    Load_City_Dis_ACT_Scens(:, c) = City_Weight(c)*Load_SUM_Dis_ACT_Scens;
end
%
%% --------------------------- Variables: ED --------------------------- %%
% ED
Var_ED_I    = binvar(Num_Gen, Num_Hour);
Var_ED_I_SU = binvar(Num_Gen, Num_Hour);
Var_ED_I_SD = binvar(Num_Gen, Num_Hour);
Var_ED_P    = sdpvar(Num_Gen, Num_Hour);
Var_ED_W    = sdpvar(Num_Hour, Num_RES);
Var_ED_S1   = sdpvar(Num_Hour, 1);
Var_ED_S2   = sdpvar(Num_Hour, 1);
Var_ED_S3   = sdpvar(Num_Hour, Num_Branch);
Var_ED_S4   = sdpvar(Num_Hour, Num_Branch);
%
%% --------------------------- Objective: ED --------------------------- %%
% ED cost
Cost_ED_SU = Gen_Price(:, 5)'*sum(Var_ED_I_SU, 2);
Cost_ED_NL = Gen_Price(:, 2)'*sum(Var_ED_I, 2);
Cost_ED_P  = Gen_Price(:, 3)'*sum(Var_ED_P, 2);
Cost_ED_S1 = LS_Price*sum(Var_ED_S1);
Cost_ED_S2 = GS_Price*sum(Var_ED_S2);
Cost_ED_S3 = BS_Price*sum(Var_ED_S3(:));
Cost_ED_S4 = BS_Price*sum(Var_ED_S4(:));
Cost_ED_All = Cost_ED_SU + Cost_ED_NL...
            + Cost_ED_P...
            + Cost_ED_S1 + Cost_ED_S2 + Cost_ED_S3 + Cost_ED_S4;
%
% Obj
Obj = Cost_ED_All;
%
%% -------------------------- Constraints: ED -------------------------- %%
Con = [];
% ED: Online or Offline?
Con = Con + [ Var_UC_I + Var_ED_I <= 1 ];
%
% ED: Logical relationship
for t = 1:Num_Hour
    if t == 1
        Con = Con...
            + [   Var_ED_I_SU(:, t) - Var_ED_I_SD(:, t)...
               == Var_ED_I(:, t) ];
    end
    if t >= 2
        Con = Con...
            + [   Var_ED_I_SU(:, t) - Var_ED_I_SD(:, t)...
               == Var_ED_I(:, t) - Var_ED_I(:, t-1) ];
    end
end
%
% ED: Segment limit
for t = 1:Num_Hour
    Con = Con...
        + [ 0 <= Var_ED_P(:, t)...
              <= Gen_Capacity(:, 3)...
                 .*(Var_UC_I(:, t) + Var_ED_I(:, t)) ];
end
%
% ED: Generation limit
for t = 1:Num_Hour
    Con = Con...
        + [   Var_ED_P(:, t)...
           >= Gen_Capacity(:, 4)...
              .*(Var_UC_I(:, t) + Var_ED_I(:, t)) ];
end
%
for t = 1:Num_Hour
    Con = Con...
        + [   Var_ED_P(:, t)...
           <= Gen_Capacity(:, 3).*Var_UC_I(:, t)...
            + Var_UC_R_C(:, t).*Var_ED_I(:, t) ];
end
%
% ED: Adjustment limit based on Hot reserve
for t = 1:Num_Hour
    Con = Con...
        + [   Var_ED_P(:, t) - Var_UC_P(:, t)...
           <=  Var_UC_R_H(:, t).*Var_UC_I(:, t)...
            + Gen_Capacity(:, 3).*Var_ED_I(:, t) ];
    Con = Con...
        + [   Var_ED_P(:, t) - Var_UC_P(:, t)...
           >= -Var_UC_R_H(:, t).*Var_UC_I(:, t)...
            - Gen_Capacity(:, 3).*Var_ED_I(:, t) ];
end
%
% ED: Ramping limit
for t = 2:Num_Hour
    Con = Con...
        + [   Var_ED_P(:, t) - Var_ED_P(:, t-1)...
           <= Gen_Capacity(:, 7).*     Var_UC_I(:, t-1)...
            + Gen_Capacity(:, 9).*(    Var_UC_I(:, t)...
            - Var_UC_I(:, t-1))...
            + Gen_Capacity(:, 3).*(1 - Var_UC_I(:, t)) ];
    Con = Con...
        + [   Var_ED_P(:, t-1) - Var_ED_P(:, t)...
           <= Gen_Capacity(:, 8).*     Var_UC_I(:, t)...
            + Gen_Capacity(:,10).*(    Var_UC_I(:, t-1)...
            - Var_UC_I(:, t))...
            + Gen_Capacity(:, 3).*(1 - Var_UC_I(:, t-1)) ];
end
%
% ED: RES curtailment limit
Con = Con + [ 0 <= Var_ED_W <= RES_Farm_Dis_ACT_Scens ];
%
% ED: Power balance
for t = 1:Num_Hour
    Con = Con...
        + [   sum(Var_ED_P(:, t))...
            + sum(Var_ED_W(t, :))...
            + Var_ED_S1(t)...
           == sum(Load_City_Dis_ACT_Scens(t, :))...
            + Var_ED_S2(t) ];
end
% ED: Transmission limit
for t = 1:Num_Hour
    for b = 1:Num_Branch
        Con = Con...
            + [   PTDF_Gen(b, :)*Var_ED_P(:, t)...
                + PTDF_RES(b, :)*Var_ED_W(t, :)'...
                - PTDF_City(b, :)*Load_City_Dis_ACT_Scens(t, :)'...
                - Var_ED_S3(t, b)...
               <= Branch(b, 5) ];
        Con = Con...
            + [   PTDF_Gen(b, :)*Var_ED_P(:, t)...
                + PTDF_RES(b, :)*Var_ED_W(t, :)'...
                - PTDF_City(b, :)*Load_City_Dis_ACT_Scens(t, :)'...
                + Var_ED_S4(t, b)...
               >= -Branch(b, 5) ];
    end
end
%
% ED: Non-negative
Con = Con + [ Var_ED_S1 >= 0 ]...
          + [ Var_ED_S2 >= 0 ]...
          + [ Var_ED_S3 >= 0 ]...
          + [ Var_ED_S4 >= 0 ];
%
%% ------------------------------ Solve it ----------------------------- %%
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
disp('Solving Inner SP: Get the Inner LB.');
disp(['Day ', num2str(Day_Dispatch)]);
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
ops = sdpsettings('solver', 'gurobi');
ops.gurobi.MIPGap = 0.01;
optimize(Con, Obj, ops);
%
%% ------------------------------ Value it ----------------------------- %%
% Enumerate binary ED decisions
Var_ED_I    = round(value(Var_ED_I));
Var_ED_I_SU = round(value(Var_ED_I_SU));
Var_ED_I_SD = round(value(Var_ED_I_SD));
%
% Obj
Obj = value(Obj);
In_Obj_LB_Latest = Obj;
%
%% ----------------- Update Recorder: Inner Information ---------------- %%
Recorder{23, end}{end+1} = Var_ED_I;
Recorder{24, end}{end+1} = Var_ED_I_SU;
Recorder{25, end}{end+1} = Var_ED_I_SD;
Recorder{26, end}        = size(Recorder{23, end}, 2);
Recorder{28, end}(end+1) = In_Obj_LB_Latest;
% Check IN Convergence
In_Obj_UB_Best       = min(Recorder{27, end});
In_Obj_LB_Best       = max(Recorder{28, end});
In_Obj_Gap_Threshold = Recorder{31, end};
In_Obj_Gap_Latest    = 100*(In_Obj_UB_Best - In_Obj_LB_Best)/In_Obj_UB_Best;
if In_Obj_Gap_Latest <= In_Obj_Gap_Threshold
    Flag_In_Converge = 1;
else
    Flag_In_Converge = 0;
end
%
if isnan(In_Obj_Gap_Latest)
    Recorder{29, end}(end+1) = 999;
else
    Recorder{29, end}(end+1) = In_Obj_Gap_Latest;
end
Recorder_Updated = [Recorder_Text Recorder];
end