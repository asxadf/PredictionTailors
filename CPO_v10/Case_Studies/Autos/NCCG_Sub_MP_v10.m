function[Recorder_Updated, Flag_In_Converge] = NCCG_Sub_MP_v10(Season, Recorder_Text, Recorder_Old)
%% ----------------------------- Root Path ----------------------------- %%
Ini_Path = which('Location_CPO_v10.m');
Ini_Size = size('Location_CPO_v10.m', 2);
if ispc == 1
    Link = '\';
elseif ismac == 1
    Link = '/';
end
Path_Root = Ini_Path(1:end - Ini_Size - 1);
Path_Data = strcat(Path_Root, Link, 'Database');
Peak_Day_List = readmatrix(strcat(Path_Data, Link, 'Peak_Day_List', '.csv'));
Date_All_List = importdata(strcat(Path_Data, Link, 'Date_All_List', '.mat'));
City_Weight   = readmatrix(strcat(Path_Data, Link, 'City_Weight', '.csv'));
Day_Dispatch  = Peak_Day_List(Season);
Date_Dispatch = Date_All_List(Day_Dispatch);
%
%% ----------------------------- Database ------------------------------ %%
[Num_Gen,...
 Num_Branch,...
 Num_Bus,...
 Num_City,...
 Num_Hour,...
 Num_RES,...
 Gen_Capacity,...
 Gen_Price,...
 Branch,...
 Load_Gro_SUM_All_ACT,...
 Load_Gro_SUM_All_DAF,...
 Load_Gro_SUM_Dis_ACT,...
 Load_Gro_SUM_Dis_DAF, Load_Gro_SUM_Dis_DAF_UB, Load_Gro_SUM_Dis_DAF_LB,...
 Load_Net_SUM_All_ACT,...
 Load_Net_SUM_All_DAF,...
 Load_Net_SUM_Dis_ACT,...
 Load_Net_SUM_Dis_DAF,...
 Load_City_All_ACT,...
 Load_City_All_DAF,...
 Load_City_Dis_ACT,...
 Load_City_Dis_DAF,...
 RES_SUM_All_ACT,...
 RES_SUM_All_DAF, RES_SUM_All_DAF_UB, RES_SUM_All_DAF_LB,...
 RES_SUM_Dis_ACT,...
 RES_SUM_Dis_DAF, RES_SUM_Dis_DAF_UB, RES_SUM_Dis_DAF_LB,...
 RES_Farm_All_ACT,...
 RES_Farm_All_DAF, RES_Farm_All_DAF_UB, RES_Farm_All_DAF_LB,...
 RES_Farm_Dis_ACT,...
 RES_Farm_Dis_DAF, RES_Farm_Dis_DAF_UB, RES_Farm_Dis_DAF_LB,...
 R_Sys_Req_All,...
 R_Sys_Req_Dis,...
 R_H_Req_All,...
 R_H_Req_Dis,...
 R_C_Req_All,...
 R_C_Req_Dis,...
 PTDF_Gen,...
 PTDF_City,...
 PTDF_RES,...
 GS_Price,...
 LS_Price,...
 BS_Price,...
 Date_All_List,...
 Day, Pre_W_UB, Pre_W_LB,...
 Unit_Quick,...
 Unit_Thermal] = Database_CPO_v10(Date_Dispatch, Link, Path_Data);
%
%% --------------------------- Load Recorder --------------------------- %%
Recorder              = Recorder_Old;
Recorder(:, 1)        = [];
Budget                = Recorder{2, end};
Var_UC_I              = Recorder{10, end};
Var_UC_I_SU           = Recorder{11, end};
Var_UC_I_SD           = Recorder{12, end};
Var_UC_I_RC           = Recorder{13, end};
Var_UC_P              = Recorder{14, end};
Var_UC_W              = Recorder{15, end};
Var_UC_R_H            = Recorder{16, end};
Var_UC_R_C            = Recorder{17, end};
Var_ED_I_History      = Recorder{23, end};
Var_ED_I_SU_History   = Recorder{24, end};
Var_ED_I_SD_History   = Recorder{25, end};
In_Num_Enumeration    = Recorder{26, end};
In_Obj_UB_History     = Recorder{27, end};
In_Obj_LB_History     = Recorder{28, end};
In_Obj_Gap_Threshold  = Recorder{31, end};
%
%% --------------------- Variable: Uncertainty Set --------------------- %%
W_UB_Bundle             = binvar(Num_Hour, 1);
W_LB_Bundle             = binvar(Num_Hour, 1);
W_UB                    = binvar(Num_Hour, Num_RES);
W_LB                    = binvar(Num_Hour, Num_RES);
L_UB                    = binvar(Num_Hour, 1);
L_LB                    = binvar(Num_Hour, 1);
RES_Farm_Dis_ACT_Scens  = sdpvar(Num_Hour, Num_RES);
Load_SUM_Dis_ACT_Scens  = sdpvar(Num_Hour, 1);
Load_City_Dis_ACT_Scens = sdpvar(Num_Hour, Num_City);
%
%% --------------------------- Variables: ED --------------------------- %%
% ED
for v = 1:In_Num_Enumeration
    Var_ED_I{v}    = round(Var_ED_I_History{v});
    Var_ED_I_SU{v} = round(Var_ED_I_SU_History{v});
    Var_ED_I_SD{v} = round(Var_ED_I_SD_History{v});
    Var_ED_P{v}    = sdpvar(Num_Gen, Num_Hour);
    Var_ED_W{v}    = sdpvar(Num_Hour, Num_RES);
    Var_ED_S1{v}   = sdpvar(Num_Hour, 1);
    Var_ED_S2{v}   = sdpvar(Num_Hour, 1);
    Var_ED_S3{v}   = sdpvar(Num_Hour, Num_Branch);
    Var_ED_S4{v}   = sdpvar(Num_Hour, Num_Branch);
end
Var_ED_Omg = sdpvar(1, 1);
%
%% --------------------------- Objective: ED --------------------------- %%
% ED cost
for v = 1:In_Num_Enumeration
    Cost_ED_SU(v) = Gen_Price(:, 5)'*sum(Var_ED_I_SU{v}, 2);
    Cost_ED_NL(v) = Gen_Price(:, 2)'*sum(Var_ED_I{v}, 2);
    Cost_ED_P(v)  = Gen_Price(:, 3)'*sum(Var_ED_P{v}, 2);
    Cost_ED_S1(v) = LS_Price*sum(Var_ED_S1{v});
    Cost_ED_S2(v) = GS_Price*sum(Var_ED_S2{v});
    Cost_ED_S3(v) = BS_Price*sum(Var_ED_S3{v}(:));
    Cost_ED_S4(v) = BS_Price*sum(Var_ED_S4{v}(:));
end
%
Cost_ED_All = Cost_ED_SU + Cost_ED_NL...
            + Cost_ED_P...
            + Cost_ED_S1 + Cost_ED_S2 + Cost_ED_S3 + Cost_ED_S4;
% Obj
Obj = -Var_ED_Omg;
%
%% -------------------- Constraint: Uncertainty Set -------------------- %% 
Con_U_Set = [];
% RES
for t = 1:Num_Hour
    Con_U_Set = Con_U_Set...
              + [ W_UB(t, :) == W_UB_Bundle(t) ]...
              + [ W_LB(t, :) == W_LB_Bundle(t) ];
end
%
Con_U_Set = Con_U_Set...
          + [   RES_Farm_Dis_ACT_Scens...
             == RES_Farm_Dis_DAF...
              + W_UB.*(RES_Farm_Dis_DAF_UB - RES_Farm_Dis_DAF)...
              + W_LB.*(RES_Farm_Dis_DAF_LB - RES_Farm_Dis_DAF) ];
%
% Load
Con_U_Set = Con_U_Set...
          + [   Load_SUM_Dis_ACT_Scens...
             == Load_Gro_SUM_Dis_DAF...
              + L_UB.*(Load_Gro_SUM_Dis_DAF_UB - Load_Gro_SUM_Dis_DAF)...
              + L_LB.*(Load_Gro_SUM_Dis_DAF_LB - Load_Gro_SUM_Dis_DAF) ];
%
for c = 1:Num_City
    Con_U_Set = Con_U_Set...
              + [   Load_City_Dis_ACT_Scens(:, c)...
                 == City_Weight(c)*Load_SUM_Dis_ACT_Scens ];
end
%
% Budget
Con_U_Set = Con_U_Set + [ W_UB_Bundle + W_LB_Bundle <= 1 ];
Con_U_Set = Con_U_Set + [ L_UB + L_LB <= 1 ];
Con_U_Set = Con_U_Set + [ sum(W_UB_Bundle + W_LB_Bundle) + sum(L_UB + L_LB) <= Budget ];
%
%% -------------------------- Constraint: Cut -------------------------- %%
Con_Cut = [];
for v = 1:In_Num_Enumeration
   Con_Cut = Con_Cut + [ Var_ED_Omg <= Cost_ED_All(v) ]; 
end
%
%% -------------------------- Constraints: ED -------------------------- %%
for v = 1:In_Num_Enumeration
    Con_ED{v} = [];
    % ED: Segment limit
    for t = 1:Num_Hour
        Con_ED{v} = Con_ED{v}...
                  + [ 0 <= Var_ED_P{v}(:, t)...
                        <= Gen_Capacity(:, 3)...
                           .*(Var_UC_I(:, t) + Var_ED_I{v}(:, t)) ];
    end
    %
    % ED: Generation limit
    for t = 1:Num_Hour
        Con_ED{v} = Con_ED{v}...
                  + [   Var_ED_P{v}(:, t)...
                     >= Gen_Capacity(:, 4)...
                        .*(Var_UC_I(:, t) + Var_ED_I{v}(:, t)) ];
    end
    %
    for t = 1:Num_Hour
        Con_ED{v} = Con_ED{v}...
                  + [   Var_ED_P{v}(:, t)...
                     <= Gen_Capacity(:, 3).*Var_UC_I(:, t)...
                      + Var_UC_R_C(:, t).*Var_ED_I{v}(:, t) ];
    end
    %
    % ED: Adjustment limit based on Hot reserve
    for t = 1:Num_Hour
        Con_ED{v} = Con_ED{v}...
               + [   Var_ED_P{v}(:, t) - Var_UC_P(:, t)...
                  <=  Var_UC_R_H(:, t).*Var_UC_I(:, t)...
                   + Gen_Capacity(:, 3).*Var_ED_I{v}(:, t) ];
        Con_ED{v} = Con_ED{v}...
               + [   Var_ED_P{v}(:, t) - Var_UC_P(:, t)...
                  >= -Var_UC_R_H(:, t).*Var_UC_I(:, t)...
                   - Gen_Capacity(:, 3).*Var_ED_I{v}(:, t) ];
    end
    %
    % ED: Ramping limit
    for t = 2:Num_Hour
        Con_ED{v} = Con_ED{v}...
                  + [   Var_ED_P{v}(:, t) - Var_ED_P{v}(:, t-1)...
                     <= Gen_Capacity(:, 7).*     Var_UC_I(:, t-1)...
                      + Gen_Capacity(:, 9).*(    Var_UC_I(:, t)...
                      - Var_UC_I(:, t-1))...
                      + Gen_Capacity(:, 3).*(1 - Var_UC_I(:, t)) ];
        Con_ED{v} = Con_ED{v}...
                  + [   Var_ED_P{v}(:, t-1) - Var_ED_P{v}(:, t)...
                     <= Gen_Capacity(:, 8).*     Var_UC_I(:, t)...
                      + Gen_Capacity(:,10).*(    Var_UC_I(:, t-1)...
                      - Var_UC_I(:, t))...
                      + Gen_Capacity(:, 3).*(1 - Var_UC_I(:, t-1)) ];
    end
    %
    % ED: RES curtailment limit
    Con_ED{v} = Con_ED{v} + [ 0 <= Var_ED_W{v} <= RES_Farm_Dis_ACT_Scens ];
    %
    % ED: Power balance
    for t = 1:Num_Hour
        Con_ED{v} = Con_ED{v}...
                  + [   sum(Var_ED_P{v}(:, t))...
                      + sum(Var_ED_W{v}(t, :))...
                      + Var_ED_S1{v}(t)...
                     == sum(Load_City_Dis_ACT_Scens(t, :))...
                      + Var_ED_S2{v}(t) ];
    end
    % ED: Transmission limit
    for t = 1:Num_Hour
        for b = 1:Num_Branch
            Con_ED{v} = Con_ED{v}...
                      + [   PTDF_Gen(b, :)*Var_ED_P{v}(:, t)...
                          + PTDF_RES(b, :)*Var_ED_W{v}(t, :)'...
                          - PTDF_City(b, :)*Load_City_Dis_ACT_Scens(t, :)'...
                          - Var_ED_S3{v}(t, b)...
                         <= Branch(b, 5) ];
            Con_ED{v} = Con_ED{v}...
                      + [   PTDF_Gen(b, :)*Var_ED_P{v}(:, t)...
                          + PTDF_RES(b, :)*Var_ED_W{v}(t, :)'...
                          - PTDF_City(b, :)*Load_City_Dis_ACT_Scens(t, :)'...
                          + Var_ED_S4{v}(t, b)...
                         >= -Branch(b, 5) ];
        end
    end
    %
    % ED: Non-negative
    Con_ED{v} = Con_ED{v} + [ Var_ED_S1{v} >= 0 ]...
                          + [ Var_ED_S2{v} >= 0 ]...
                          + [ Var_ED_S3{v} >= 0 ]...
                          + [ Var_ED_S4{v} >= 0 ];
        %% -------------------------- KKT -------------------------- %%
        [KKT_System{v}, KKT_Details{v}] = kkt(Con_ED{v}, Cost_ED_All(v),...
                                              [ RES_Farm_Dis_ACT_Scens(:);
                                                Load_City_Dis_ACT_Scens(:) ]);
        %
        % Stationarity
        KKT_Station{v} = KKT_System{v}(3);
        %
        % Primal feasibility
        KKT_P_Fea{v} = KKT_Details{v}.inequalities...
                     + KKT_Details{v}.equalities;
        %
        % Dual feasibility
        KKT_D_Fea{v} = [ KKT_Details{v}.dual >= 0 ];
        %
        % Complementarities
        u{v}   = binvar(size(KKT_Details{v}.A, 1), 1);
        M_D{v} = 10000*ones(size(KKT_Details{v}.A, 1), 1);
        M_P    = 50000;
        KKT_Comple{v} = [  KKT_Details{v}.dual <= M_D{v}.*u{v} ]...
                      + [  KKT_Details{v}.A*KKT_Details{v}.primal...
                         - KKT_Details{v}.b >= M_P*(u{v} - 1) ];
        % SUM
        Con_KKT{v} = KKT_Station{v} + KKT_P_Fea{v}...
                   + KKT_D_Fea{v} + KKT_Comple{v};
%
end
%
%% ------------------------------ Solve it ----------------------------- %%
Con = Con_U_Set + Con_Cut;
for v = 1:In_Num_Enumeration
    Con = Con + Con_KKT{v};
end
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
disp('Solving Inner MP: Get the Inner UB.');
disp(['Day ', num2str(Day_Dispatch)]);
disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
ops = sdpsettings('solver', 'gurobi');
ops.gurobi.MIPGap = 0.01;
optimize(Con, Obj, ops);
%
%% ------------------------------ Value it ----------------------------- %%
% Scenarios
W_UB = value(W_UB);
W_LB = value(W_LB);
L_UB = value(L_UB);
L_LB = value(L_LB);
%
% Obj
Obj = value(Obj);
In_Obj_UB_Latest = -Obj;
%
%% ----------------- Update Recorder: Inner Information ---------------- %%
In_W_UB_Latest = W_UB;
In_W_LB_Latest = W_LB;
In_L_UB_Latest = L_UB;
In_L_LB_Latest = L_LB;
%
Recorder{19, end}{end+1} = In_W_UB_Latest;
Recorder{20, end}{end+1} = In_W_LB_Latest;
Recorder{21, end}{end+1} = In_L_UB_Latest;
Recorder{22, end}{end+1} = In_L_LB_Latest;
Recorder{27, end}(end+1) = In_Obj_UB_Latest;
%
% Check IN Convergence
In_Obj_UB_Best = min(Recorder{27, end});
In_Obj_LB_Best = max(Recorder{28, end});
In_Obj_Gap_Latest = 100*(In_Obj_UB_Best - In_Obj_LB_Best)/In_Obj_UB_Best;
if In_Obj_Gap_Latest <= In_Obj_Gap_Threshold
    Flag_In_Converge = 1;
else
    Flag_In_Converge = 0;
end
%
if isnan(In_Obj_Gap_Latest)
    Recorder{29, end}(end+1) = 999;
else
    Recorder{29, end}(end+1) = In_Obj_Gap_Latest;
end
Recorder_Updated = [Recorder_Text Recorder];
end