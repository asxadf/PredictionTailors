function...
[Enu_I,...
 Enu_I_SU,...
 Enu_I_SD,...
 Enu_I_RC,...
 Bound_Upper,...
 Date_Tra_Selected,...
 Training_Time_SP]...
 = CPO_Step01_SP_Auto_v9...
 (Day_Dispatch,...
  Date_Dispatch,...
  NT,...
  lambda,...
  Iteration,...
  OVar_Phi_RES,...
  OVar_Phi_R_H,...
  OVar_Phi_R_C,...
  Date_Tra_All,...
  M_P,...
  Current_Gap,...
  Link,...
  Path_Data)
%
%% ---------------------------- Initialize ----------------------------- %%
Training_Time_SP = 0;
%
%% ------------------------------ Loading ------------------------------ %%
[Num_Gen,...
 Num_Branch,...
 Num_Bus,...
 Num_City,...
 Num_Hour,...
 Num_RES,...
 Gen_Capacity,...
 Gen_Price,...
 Branch,...
 Load_Gro_SUM_All_ACT,...
 Load_Gro_SUM_All_DAF,...
 Load_Gro_SUM_Dis_ACT,...
 Load_Gro_SUM_Dis_DAF, Load_Gro_SUM_Dis_DAF_UB, Load_Gro_SUM_Dis_DAF_LB,...
 Load_Net_SUM_All_ACT,...
 Load_Net_SUM_All_DAF,...
 Load_Net_SUM_Dis_ACT,...
 Load_Net_SUM_Dis_DAF,...
 Load_City_All_ACT,...
 Load_City_All_DAF,...
 Load_City_Dis_ACT,...
 Load_City_Dis_DAF,...
 RES_SUM_All_ACT,...
 RES_SUM_All_DAF, RES_SUM_All_DAF_UB, RES_SUM_All_DAF_LB,...
 RES_SUM_Dis_ACT,...
 RES_SUM_Dis_DAF, RES_SUM_Dis_DAF_UB, RES_SUM_Dis_DAF_LB,...
 RES_Farm_All_ACT,...
 RES_Farm_All_DAF, RES_Farm_All_DAF_UB, RES_Farm_All_DAF_LB,...
 RES_Farm_Dis_ACT,...
 RES_Farm_Dis_DAF, RES_Farm_Dis_DAF_UB, RES_Farm_Dis_DAF_LB,...
 R_Sys_Req_All,...
 R_Sys_Req_Dis,...
 R_H_Req_All,...
 R_H_Req_Dis,...
 R_C_Req_All,...
 R_C_Req_Dis,...
 PTDF_Gen,...
 PTDF_City,...
 PTDF_RES,...
 GS_Price,...
 LS_Price,...
 BS_Price,...
 Date_All_List,...
 Day, Pre_W_UB, Pre_W_LB,...
 Unit_Quick,...
 Unit_Thermal] = Database_CPO_v9(Date_Dispatch, Link, Path_Data);
%
%% ----------------------------- Pick Data ----------------------------- %%
Date_Tra_Selected = Date_Tra_All{Day_Dispatch}(1:NT);
for s = 1:NT
    Day_Tra_Selected(s, 1)     = find(Date_All_List == Date_Tra_Selected(s));
    Load_Gro_SUM_Tra_ACT(:, s) = Load_Gro_SUM_All_ACT(:, Day_Tra_Selected(s));
    Load_Gro_SUM_Tra_DAF(:, s) = Load_Gro_SUM_All_DAF(:, Day_Tra_Selected(s));
    Load_City_Tra_ACT(:, s)    = Load_City_All_ACT(Day_Tra_Selected(s));
    Load_City_Tra_DAF(:, s)    = Load_City_All_DAF(Day_Tra_Selected(s));
    RES_SUM_Tra_ACT(:, s)      = RES_SUM_All_ACT(:, Day_Tra_Selected(s));
    RES_SUM_Tra_DAF(:, s)      = RES_SUM_All_DAF(:, Day_Tra_Selected(s));
    RES_Farm_Tra_ACT{s, 1}     = RES_Farm_All_ACT{Day_Tra_Selected(s)};
    RES_Farm_Tra_DAF{s, 1}     = RES_Farm_All_DAF{Day_Tra_Selected(s)};
    R_H_Req_Tra(:, s)          = R_H_Req_All(:, Day_Tra_Selected(s));
    R_C_Req_Tra(:, s)          = R_C_Req_All(:, Day_Tra_Selected(s));
    Load_Net_SUM_Tra_ACT(:, s) = Load_Net_SUM_All_ACT(:, Day_Tra_Selected(s));
    Load_Net_SUM_Tra_DAF(:, s) = Load_Net_SUM_All_DAF(:, Day_Tra_Selected(s));
end
%
%% ---------------------------- Predictions ---------------------------- %%
for s = 1:NT
    OVar_Pre_RES_Avai{s, 1} = OVar_Phi_RES.*RES_Farm_Tra_DAF{s};
    OVar_Pre_R_H_Need{s, 1} = OVar_Phi_R_H.*Load_Net_SUM_Tra_DAF(:, s);
    OVar_Pre_R_C_Need{s, 1} = OVar_Phi_R_C.*Load_Net_SUM_Tra_DAF(:, s);
end
%
%% -------------------------- UC Per Scenario -------------------------- %%
Ticket_SP1 = 1;
while ~exist('Ticket_MP', 'var')
    for s = 1:NT
        %% ------------------ Duplicated UC: Variable ------------------ %%
        DVar_UC_I{s, 1}    = binvar(Num_Gen, Num_Hour);
        DVar_UC_I_SU{s, 1} = binvar(Num_Gen, Num_Hour);
        DVar_UC_I_SD{s, 1} = binvar(Num_Gen, Num_Hour);
        DVar_UC_I_RC{s, 1} = binvar(Num_Gen, Num_Hour);
        DVar_UC_P{s, 1}    = sdpvar(Num_Gen, Num_Hour);
        DVar_UC_W{s, 1}    = sdpvar(Num_Hour,Num_RES);
        DVar_UC_R_H{s, 1}  = sdpvar(Num_Gen, Num_Hour);
        DVar_UC_R_C{s, 1}  = sdpvar(Num_Gen, Num_Hour);
        %
        %% ----------------- Duplicated UC: Objective ------------------ %%
        DObj_Cost_UC_SU(s, 1)   = Gen_Price(:, 5)'*sum(DVar_UC_I_SU{s}, 2);
        DObj_Cost_UC_NL(s, 1)   = Gen_Price(:, 2)'*sum(DVar_UC_I{s}, 2);
        DObj_Cost_UC_P(s, 1)    = Gen_Price(:, 3)'*sum(DVar_UC_P{s}, 2);
        DObj_Cost_SYS_EXP(s, 1) = DObj_Cost_UC_SU(s)...
                                + DObj_Cost_UC_NL(s)...
                                + DObj_Cost_UC_P(s);
        % For SP1
        if  exist('Ticket_SP1', 'var') && ~exist('Ticket_SP2', 'var')
            Obj_SP(s, 1) = DObj_Cost_SYS_EXP(s);
        end
        % For SP2
        if ~exist('Ticket_SP1', 'var') && exist('Ticket_SP2', 'var')
            %% ------------------ Outer ED: Variables ------------------ %%
            OVar_ED_I{s, 1}    = binvar(Num_Gen, Num_Hour);
            OVar_ED_I_SU{s, 1} = binvar(Num_Gen, Num_Hour);
            OVar_ED_I_SD{s, 1} = binvar(Num_Gen, Num_Hour);
            OVar_ED_P{s, 1}    = sdpvar(Num_Gen, Num_Hour);
            OVar_ED_W{s, 1}    = sdpvar(Num_Hour, Num_RES);
            OVar_ED_S1{s, 1}   = sdpvar(Num_Hour, 1);
            OVar_ED_S2{s, 1}   = sdpvar(Num_Hour, 1);
            OVar_ED_S3{s, 1}   = sdpvar(Num_Hour, Num_Branch);
            OVar_ED_S4{s, 1}   = sdpvar(Num_Hour, Num_Branch);
            OVar_ED_Z1{s, 1}   = sdpvar(Num_Gen, Num_Hour);
            OVar_ED_Z2{s, 1}   = sdpvar(Num_Gen, Num_Hour);
            %% ------------------ Outer ED: Objective ------------------ %%
            OObj_Cost_UC_SU(s, 1)  = Gen_Price(:, 5)'*sum(DVar_UC_I_SU{s}, 2);
            OObj_Cost_UC_NL(s, 1)  = Gen_Price(:, 2)'*sum(DVar_UC_I{s}, 2);
            OObj_Cost_UC_ACT(s, 1) = OObj_Cost_UC_SU(s)...
                                   + OObj_Cost_UC_NL(s);        
            OObj_Cost_ED_SU(s, 1)  = Gen_Price(:, 5)'*sum(OVar_ED_I_SU{s}, 2);                   
            OObj_Cost_ED_NL(s, 1)  = Gen_Price(:, 2)'*sum(OVar_ED_I{s}, 2);
            OObj_Cost_ED_P(s, 1)   = Gen_Price(:, 3)'*sum(OVar_ED_P{s}, 2);
            OObj_Cost_ED_S1(s, 1)  = LS_Price*sum(OVar_ED_S1{s});
            OObj_Cost_ED_S2(s, 1)  = GS_Price*sum(OVar_ED_S2{s});
            OObj_Cost_ED_S3(s, 1)  = BS_Price*sum(OVar_ED_S3{s}(:));
            OObj_Cost_ED_S4(s, 1)  = BS_Price*sum(OVar_ED_S4{s}(:));
            OObj_Cost_ED_ACT(s, 1) = OObj_Cost_ED_SU(s)...
                                   + OObj_Cost_ED_NL(s)...
                                   + OObj_Cost_ED_P(s)...
                                   + OObj_Cost_ED_S1(s)...
                                   + OObj_Cost_ED_S2(s)...
                                   + OObj_Cost_ED_S3(s)...
                                   + OObj_Cost_ED_S4(s);
            OObj_Cost_SYS_ACT(s, 1) = OObj_Cost_UC_ACT(s)...
                                    + OObj_Cost_ED_ACT(s);         
            Obj_SP(s, 1) = OObj_Cost_SYS_ACT(s);
        end
        %
        %% ------------------------ Constraints ------------------------ %%
        DCon{s, 1} = [];
        %
        %% ---------------- Constraints: Outer Training ---------------- %%
%         DCon{s, 1} = DCon{s, 1} + [ sum(DVar_UC_R_H{s})' <= OVar_Pre_R_H_Need{s} ];
%         DCon{s, 1} = DCon{s, 1} + [ sum(DVar_UC_R_C{s})' <= OVar_Pre_R_C_Need{s} ];
        %
        %% ----------------- Constraint; Duplicated UC ----------------- %%
        % UC: Generation limit
        for t = 1:Num_Hour
            DCon{s, 1} = DCon{s, 1}...
                       + [   DVar_UC_P{s}(:, t) - DVar_UC_R_H{s}(:, t)...
                          >= Gen_Capacity(:, 4).* DVar_UC_I{s}(:, t) ];
            DCon{s, 1} = DCon{s, 1}...
                       + [   DVar_UC_P{s}(:, t) + DVar_UC_R_H{s}(:, t)...
                          <= Gen_Capacity(:, 3).* DVar_UC_I{s}(:, t) ];
        end
        %
        % UC: Segment limit
        for t = 1:Num_Hour
            DCon{s, 1} = DCon{s, 1}...
                       + [ 0 <= DVar_UC_P{s}(:, t)...
                             <= Gen_Capacity(:, 3).*DVar_UC_I{s}(:, t) ];
        end
        %
        % UC: Hot reserve limit
        for t = 1:Num_Hour
            DCon{s, 1} = DCon{s, 1}...
                       + [ 0 <= DVar_UC_R_H{s}(:, t)...
                             <= Gen_Capacity(:, 11).*DVar_UC_I{s}(:, t) ];
        end
        %
        % UC: Cool reserve limit
        for t = 1:Num_Hour
            DCon{s, 1} = DCon{s, 1}...
                       + [   DVar_UC_R_C{s}(:, t)...
                          >= Gen_Capacity(:, 4).*DVar_UC_I_RC{s}(:, t) ];
            DCon{s, 1} = DCon{s, 1}...
                       + [   DVar_UC_R_C{s}(:, t)...
                          <= Gen_Capacity(:,12).*DVar_UC_I_RC{s}(:, t) ];
        end
        %
        % UC: Cool reserve flag
        DCon{s, 1} = DCon{s, 1}...
                   + [ DVar_UC_I_RC{s} + DVar_UC_I{s} <= 1 ];
        %
        % UC: Logical relationship
        for t = 1:Num_Hour
            if t == 1
                DCon{s, 1} = DCon{s, 1}...
                           + [   DVar_UC_I_SU{s}(:, t) - DVar_UC_I_SD{s}(:, t)...
                              == DVar_UC_I{s}(:, t) ];
            end
            if t >= 2
                DCon{s, 1} = DCon{s, 1}...
                           + [   DVar_UC_I_SU{s}(:, t) - DVar_UC_I_SD{s}(:, t)...
                              == DVar_UC_I{s}(:, t) - DVar_UC_I{s}(:, t-1) ];
            end
        end
        %
        % UC: Min ON/OFF
        for i = 1:Num_Gen
            % Min ON
            for t = Gen_Capacity(i, 5):Num_Hour
                DCon{s, 1} = DCon{s, 1}...
                           + [   sum(DVar_UC_I_SU{s}(i, t-Gen_Capacity(i, 5)+1:t))...
                              <= DVar_UC_I{s}(i, t) ];
            end
            % Min OFF
            for t = Gen_Capacity(i, 6):Num_Hour
                DCon{s, 1} = DCon{s, 1}...
                           + [   sum(DVar_UC_I_SD{s}(i, t-Gen_Capacity(i, 6)+1:t))...
                              <= 1 - DVar_UC_I{s}(i, t) ];
            end
        end
        %
        % UC: Ramping limit
        for t = 2:Num_Hour
            DCon{s, 1} = DCon{s, 1}...
                       + [   DVar_UC_P{s}(:, t) - DVar_UC_P{s}(:, t-1)...
                          <= Gen_Capacity(:, 7).*     DVar_UC_I{s}(:, t-1)...
                           + Gen_Capacity(:, 9).*(    DVar_UC_I{s}(:, t)...
                                                    - DVar_UC_I{s}(:, t-1))...
                           + Gen_Capacity(:, 3).*(1 - DVar_UC_I{s}(:, t)) ];
            DCon{s, 1} = DCon{s, 1}...
                       + [   DVar_UC_P{s}(:,t-1) - DVar_UC_P{s}(:, t)...
                          <= Gen_Capacity(:, 8).*     DVar_UC_I{s}(:, t)...
                           + Gen_Capacity(:,10).*(    DVar_UC_I{s}(:, t-1)...
                                                    - DVar_UC_I{s}(:, t))...
                           + Gen_Capacity(:, 3).*(1 - DVar_UC_I{s}(:, t-1)) ];
        end
        %
        % UC: RES curtailment limit
        DCon{s, 1} = DCon{s, 1}...
                   + [ 0 <= DVar_UC_W{s} <= OVar_Pre_RES_Avai{s} ];
        %
        % UC: Thermal untis
        for i = Unit_Thermal
            DCon{s, 1} = DCon{s, 1}...
                       + [ DVar_UC_I_RC{s}(i, :) == 0];
        end
        %
        % UC: Power balance
        for t = 1:Num_Hour
            DCon{s, 1} = DCon{s, 1}...
                       + [   sum(DVar_UC_P{s}(:, t))...
                           + sum(DVar_UC_W{s}(t, :))...
                          == sum(Load_City_Tra_DAF{s}(t, :)) ];
        end
        %
        % UC: Transmission limit
        for t = 1:Num_Hour
            DCon{s, 1} = DCon{s, 1}...
                       + [ - Branch(:, 5)...
                          <= PTDF_Gen*DVar_UC_P{s}(:, t)...
                           + PTDF_RES*DVar_UC_W{s}(t, :)'...
                           - PTDF_City*Load_City_Tra_DAF{s}(t, :)'...
                          <= Branch(:, 5) ];
        end
        %
        % UC: Reserve requirement (>= or ==)
        DCon{s, 1} = DCon{s, 1}...
                   + [ sum(DVar_UC_R_H{s})' >= OVar_Pre_R_H_Need{s} ];
        DCon{s, 1} = DCon{s, 1}...
                   + [   sum(DVar_UC_R_H{s})' + sum(DVar_UC_R_C{s})'...
                      >= OVar_Pre_R_H_Need{s} + OVar_Pre_R_C_Need{s} ];
        %
        %% -------------------- Constraints for SP2 -------------------- %%
        % Have ticket for SP2 ===> Add constraints
        if ~exist('Ticket_SP1', 'var') && exist('Ticket_SP2', 'var')
            % UC obj cut
            DCon{s, 1} = DCon{s, 1} + [   DObj_Cost_SYS_EXP(s)...
                                       <= DObj_Cost_SYS_EXP_Bound(s) ];
            %
            %% ----------------- Constraints: Outer ED ----------------- %%
            % ED: Online or Offline?
            DCon{s, 1} = DCon{s, 1} + [ DVar_UC_I{s} + OVar_ED_I{s} <= 1 ];
            %
            % ED: Logical relationship
            for t = 1:Num_Hour
                if t == 1
                    DCon{s, 1} = DCon{s, 1}...
                               + [   OVar_ED_I_SU{s}(:, t) - OVar_ED_I_SD{s}(:, t)...
                                  == OVar_ED_I{s}(:, t) ];
                end
                if t >= 2
                    DCon{s, 1} = DCon{s, 1}...
                               + [   OVar_ED_I_SU{s}(:, t) - OVar_ED_I_SD{s}(:, t)...
                                  == OVar_ED_I{s}(:, t) - OVar_ED_I{s}(:, t-1) ];
                end
            end
            %
            % ED: Segment limit
            for t = 1:Num_Hour
                DCon{s, 1} = DCon{s, 1}...
                           + [ 0 <= OVar_ED_P{s}(:, t)...
                                 <= Gen_Capacity(:, 3)...
                                    .*(DVar_UC_I{s}(:, t) + OVar_ED_I{s}(:, t)) ];
            end
            %
            % ED: Generation limit
            for t = 1:Num_Hour
                DCon{s, 1} = DCon{s, 1}...
                           + [   OVar_ED_P{s}(:, t)...
                              >= Gen_Capacity(:, 4)...
                                 .*(DVar_UC_I{s}(:, t) + OVar_ED_I{s}(:, t)) ];
            end
            % -------------------- Linearized part 1 -------------------- %
            % Before
            % for t = 1:Num_Hour
            %     DCon{s, 1} = DCon{s, 1}...
            %                + [   OVar_ED_P{s}(:, t)...
            %                   <= Gen_Capacity(:, 3).*DVar_UC_I{s}(:, t)...
            %                    + DVar_UC_R_C{s}(:, t).*OVar_ED_I{s}(:, t) ];
            % end
            % After
            for t = 1:Num_Hour
                DCon{s, 1} = DCon{s, 1}...
                           + [   OVar_ED_P{s}(:, t)...
                              <= Gen_Capacity(:, 3).*DVar_UC_I{s}(:, t)...
                               + OVar_ED_Z1{s}(:, t) ];
            end
            DCon{s, 1} = DCon{s, 1} + [ OVar_ED_Z1{s} <= OVar_ED_I{s}*M_P ];
            DCon{s, 1} = DCon{s, 1} + [ OVar_ED_Z1{s} >= 0 ];
            DCon{s, 1} = DCon{s, 1} + [ OVar_ED_Z1{s} <= DVar_UC_R_C{s} ];
            DCon{s, 1} = DCon{s, 1} + [ OVar_ED_Z1{s} >= DVar_UC_R_C{s}...
                                                       - (1 - OVar_ED_I{s})*M_P ];
            % -------------------- Linearized part 1 -------------------- %
            %
            % -------------------- Linearized part 2 -------------------- %
            % ED: Adjustment limit based on Hot reserve
            % Before
%             for t = 1:Num_Hour
%                 DCon{s, 1} = DCon{s, 1}...
%                            + [   OVar_ED_P{s}(:, t) - DVar_UC_P{s}(:, t)...
%                               <=  DVar_UC_R_H{s}(:, t).*DVar_UC_I{s}(:, t)...
%                                + Gen_Capacity(:, 3).*OVar_ED_I{s}(:, t) ];
%                 DCon{s, 1} = DCon{s, 1}...
%                            + [   OVar_ED_P{s}(:, t) - DVar_UC_P{s}(:, t)...
%                               >= -DVar_UC_R_H{s}(:, t).*DVar_UC_I{s}(:, t)...
%                                - Gen_Capacity(:, 3).*OVar_ED_I{s}(:, t)];
%             end
            % After
            for t = 1:Num_Hour
                DCon{s, 1} = DCon{s, 1}...
                           + [   OVar_ED_P{s}(:, t) - DVar_UC_P{s}(:, t)...
                              <=  OVar_ED_Z2{s}(:, t)...
                               + Gen_Capacity(:, 3).*OVar_ED_I{s}(:, t) ];
                DCon{s, 1} = DCon{s, 1}...
                           + [   OVar_ED_P{s}(:, t) - DVar_UC_P{s}(:, t)...
                              >= -OVar_ED_Z2{s}(:, t)...
                               - Gen_Capacity(:, 3).*OVar_ED_I{s}(:, t)];
            end
            % Linearize
            DCon{s, 1} = DCon{s, 1} + [ OVar_ED_Z2{s} <= DVar_UC_I{s}*M_P ];
            DCon{s, 1} = DCon{s, 1} + [ OVar_ED_Z2{s} >= 0 ];
            DCon{s, 1} = DCon{s, 1} + [ OVar_ED_Z2{s} <= DVar_UC_R_H{s} ];
            DCon{s, 1} = DCon{s, 1} + [ OVar_ED_Z2{s} >= DVar_UC_R_H{s}...
                                                       - (1 - DVar_UC_I{s})*M_P ];
            % -------------------- Linearized part 2 -------------------- %
            % ED: Ramping limit
            for t = 2:Num_Hour
                DCon{s, 1} = DCon{s, 1}...
                           + [   OVar_ED_P{s}(:, t) - OVar_ED_P{s}(:, t-1)...
                              <= Gen_Capacity(:, 7).*     DVar_UC_I{s}(:, t-1)...
                               + Gen_Capacity(:, 9).*(    DVar_UC_I{s}(:, t)...
                                                        - DVar_UC_I{s}(:, t-1))...
                               + Gen_Capacity(:, 3).*(1 - DVar_UC_I{s}(:, t)) ];
                DCon{s, 1} = DCon{s, 1}...
                           + [   OVar_ED_P{s}(:, t-1) - OVar_ED_P{s}(:, t)...
                              <= Gen_Capacity(:, 8).*     DVar_UC_I{s}(:, t)...
                               + Gen_Capacity(:,10).*(    DVar_UC_I{s}(:, t-1)...
                                                        - DVar_UC_I{s}(:, t))...
                               + Gen_Capacity(:, 3).*(1 - DVar_UC_I{s}(:, t-1)) ];
            end
            %
            % ED: RES curtailment limit
            DCon{s, 1} = DCon{s, 1} + [ 0 <= OVar_ED_W{s} <= RES_Farm_Tra_ACT{s} ];
            %
            % ED: Power balance
            for t = 1:Num_Hour
                DCon{s, 1} = DCon{s, 1}...
                           + [   sum(OVar_ED_P{s}(:, t))...
                               + sum(OVar_ED_W{s}(t, :))...
                               + OVar_ED_S1{s}(t)...
                              == sum(Load_City_Tra_ACT{s}(t, :))...
                               + OVar_ED_S2{s}(t) ];
            end
            %
            % ED: Transmission limit
            for t = 1:Num_Hour
                DCon{s, 1} = DCon{s, 1}...
                           + [   PTDF_Gen*OVar_ED_P{s}(:, t)...     
                               + PTDF_RES*OVar_ED_W{s}(t, :)'...
                               - PTDF_City*Load_City_Tra_ACT{s}(t, :)'...
                               - OVar_ED_S3{s}(t, :)'...
                              <= Branch(:, 5) ];
                DCon{s, 1} = DCon{s, 1}...
                           + [   PTDF_Gen*OVar_ED_P{s}(:, t)...
                               + PTDF_RES*OVar_ED_W{s}(t, :)'...
                               - PTDF_City*Load_City_Tra_ACT{s}(t, :)'...
                               + OVar_ED_S4{s}(t, :)'...
                               >= -Branch(:, 5) ];
            end
            %
            % ED: Non-negative
            DCon{s, 1} = DCon{s, 1} + [ OVar_ED_S1{s} >= 0 ]...
                                    + [ OVar_ED_S2{s} >= 0 ]...
                                    + [ OVar_ED_S3{s} >= 0 ]...
                                    + [ OVar_ED_S4{s} >= 0 ];
            %
        end
        %% -------------------------- Solving -------------------------- %%
        disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
        if exist('Ticket_SP1', 'var') && ~exist('Ticket_SP2', 'var')
            disp('Solving SP1: Get the UC objective given the predictors.');
        end
        if ~exist('Ticket_SP1', 'var') && exist('Ticket_SP2', 'var')
            disp('Solving SP2: Pick the UC solution in favor of outer objective and get UB.');
        end
        disp([num2str(s), ' of ', num2str(NT)]);
        disp(['This is the #', num2str(Iteration), ' iteration for SP...']);
        disp(['This is the #', num2str(Day_Dispatch), ' dispatch day: ', datestr(Date_All_List(Day_Dispatch))]);
        disp(['Current gap: ', num2str(Current_Gap), '%']);
        disp('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%');
        ops = sdpsettings('solver', 'gurobi');
        ops.gurobi.MIPGap = 0.01;
        sol = optimize(DCon{s}, Obj_SP(s), ops);
        Training_Time_SP = Training_Time_SP + sol.solvertime;
        % In SP1 ===> Take the obj as bound
        if exist('Ticket_SP1', 'var') && ~exist('Ticket_SP2', 'var')
            DObj_Cost_SYS_EXP_Bound(s, 1) = value(Obj_SP(s));
        end
        % Enough SP2 ===> Get ticket for MP
        if s == NT && ~exist('Ticket_SP1', 'var') && exist('Ticket_SP2', 'var')
            Ticket_MP = 1;
            clear Ticket_SP2;
        end
        % Enough SP1 ===> Get ticket for SP2
        if s == NT && exist('Ticket_SP1', 'var') && ~exist('Ticket_SP2', 'var')
            Ticket_SP2 = 1;
            clear Ticket_SP1;
        end
    end
end
%
%% ------------------------------ Value It ----------------------------- %%
for s = 1:NT
    % Duplicated UC
    DVar_UC_I{s}    = round(value(DVar_UC_I{s}));
    DVar_UC_I_SU{s} = round(value(DVar_UC_I_SU{s}));
    DVar_UC_I_SD{s} = round(value(DVar_UC_I_SD{s}));
    DVar_UC_I_RC{s} = round(value(DVar_UC_I_RC{s}));
    DVar_UC_P{s}    = value(DVar_UC_P{s});
    DVar_UC_W{s}    = value(DVar_UC_W{s});
    DVar_UC_R_H{s}  = value(DVar_UC_R_H{s});
    DVar_UC_R_C{s}  = value(DVar_UC_R_C{s});
    % Outer ED
    OVar_ED_I{s}    = value(OVar_ED_I{s});
    OVar_ED_I_SU{s} = value(OVar_ED_I_SU{s});
    OVar_ED_I_SD{s} = value(OVar_ED_I_SD{s});
    OVar_ED_P{s}    = value(OVar_ED_P{s});
    OVar_ED_W{s}    = value(OVar_ED_W{s});
    OVar_ED_S1{s}   = value(OVar_ED_S1{s});
    OVar_ED_S2{s}   = value(OVar_ED_S2{s});
    OVar_ED_S3{s}   = value(OVar_ED_S3{s});
    OVar_ED_S4{s}   = value(OVar_ED_S4{s});
    OVar_ED_Z1{1}   = value(OVar_ED_Z1{s});
    OVar_ED_Z2{1}   = value(OVar_ED_Z2{s});
end
% Inner UC cost
DObj_Cost_UC_SU   = value(DObj_Cost_UC_SU);
DObj_Cost_UC_NL   = value(DObj_Cost_UC_NL);
DObj_Cost_UC_P    = value(DObj_Cost_UC_P);
DObj_Cost_SYS_EXP = value(DObj_Cost_SYS_EXP);
% Outer cost
OObj_Cost_UC_SU  = value(OObj_Cost_UC_SU);
OObj_Cost_UC_NL  = value(OObj_Cost_UC_NL);
OObj_Cost_UC_ACT = value(OObj_Cost_UC_ACT);
OObj_Cost_ED_SU  = value(OObj_Cost_ED_SU);
OObj_Cost_ED_NL  = value(OObj_Cost_ED_NL);
OObj_Cost_ED_P   = value(OObj_Cost_ED_P);
OObj_Cost_ED_S1  = value(OObj_Cost_ED_S1);
OObj_Cost_ED_S2  = value(OObj_Cost_ED_S2);
OObj_Cost_ED_S3  = value(OObj_Cost_ED_S3);
OObj_Cost_ED_S4  = value(OObj_Cost_ED_S4);
OObj_Cost_ED_ACT = value(OObj_Cost_ED_ACT);
% Acutal system cost
Obj_SP = value(Obj_SP);
OObj_Cost_SYS_ACT = value(OObj_Cost_SYS_ACT);
% OObj_Reg = lambda*norm(OVar_Phi_RES, 1)...
%          - lambda*norm(OVar_Phi_R_H, 1)...
%          - lambda*norm(OVar_Phi_R_C, 1);
% OObj_Reg = lambda*norm(OVar_Phi_RES, 1)...
OObj_Reg = lambda*norm(OVar_Phi_RES, 1)...
         - 0.5*lambda*OVar_Phi_R_H(1)...
         - 0.1*lambda*OVar_Phi_R_C(1);
Bound_Upper = sum(OObj_Cost_SYS_ACT)/NT + OObj_Reg;
%
%% ------------------------- Enumeration to MP ------------------------- %%
Enu_I    = DVar_UC_I;
Enu_I_SU = DVar_UC_I_SU;
Enu_I_SD = DVar_UC_I_SD;
Enu_I_RC = DVar_UC_I_RC;
%
yalmip('clear');
end